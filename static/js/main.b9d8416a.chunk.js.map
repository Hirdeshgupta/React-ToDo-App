{"version":3,"sources":["Header.js","Todos.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","background","color","fontWeight","fontSize","Todos","state","isChecked","ishide","handleChange","event","setState","handleClick","display","this","type","checked","onChange","textDecoration","props","todo","onClick","far","icon","size","React","Component","Search","search","tododisplay","tododisplayarr","todos","submitForm","charCode","document","querySelector","value","push","map","x","data-test","class","role","label","target","onKeyPress","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b9d8416a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBJumbotron, MDBContainer } from \"mdbreact\";\r\nconst Header = () => {\r\n  return (\r\n      <div>\r\n    <MDBJumbotron className=\"mb-0 \" style={{background:\"rgb(51, 51, 51)\",color:\"white\",fontWeight:\"bold\"}}>\r\n      <MDBContainer >\r\n        <h2 style={{fontWeight:\"bold\",fontSize:\"3rem\"}} className=\" text-center\">Todo List</h2>\r\n      </MDBContainer>\r\n    </MDBJumbotron>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport {MDBIcon } from \"mdbreact\";\r\n\r\n\r\nclass  Todos extends React.Component{\r\nstate = {\r\n    isChecked:false,\r\n    ishide:false\r\n}\r\nhandleChange=(event)=>{\r\n    this.setState({isChecked:!(this.state.isChecked)})\r\n    }\r\nhandleClick=(event)=>{\r\n        this.setState({ishide:true})\r\n        }\r\n\r\nrender(){\r\n  return (\r\n    <div className=\"container-fluid ml-4  row\" style={{display:this.state.ishide ? \"none\":\"flex\"}}>\r\n        <div className=\"col-md-11 col-10  blue-grey lighten-5 p-2 pt-3 border border-dark\">\r\n        <label>\r\n        <input type=\"checkbox\" checked={this.state.isChecked}  onChange={this.handleChange} /> <span className=\"ml-3 font-weight-bold\" style={{fontSize:\"1.25rem\",textDecoration:this.state.isChecked ? \"line-through\" : \"none\"}} >{this.props.todo}</span>\r\n        </label> \r\n        </div>\r\n        <div className=\"p-2 border border-dark bin \">\r\n        <a onClick={this.handleClick}>\r\n        <MDBIcon far icon=\"trash-alt\" size=\"2x\" className=\"pt-2  \"  />\r\n        </a>  \r\n        </div> \r\n    </div>\r\n  )\r\n}\r\n}\r\nexport default Todos;","import React from \"react\";\r\nimport {MDBInput,MDBBtn} from \"mdbreact\";\r\nimport Todos from \"./Todos\"\r\nclass Search extends React.Component {\r\n    state = {\r\n        search:\"\",\r\n        tododisplay:'',\r\n        tododisplayarr:[],\r\n        todos:[]\r\n    }\r\n    \r\n    submitForm  = (event)=>{\r\n        if(event.charCode){\r\n            if(event.charCode==13){\r\n                if(document.querySelector(\".textinput\").value!=\"\" ){\r\n                    document.querySelector(\".alert1\").style.display=\"none\";\r\n                    this.setState({tododisplay:this.state.search})\r\n                    this.state.tododisplayarr.push(this.state.search);\r\n                    this.setState({todos:this.state.tododisplayarr.map(x=><Todos todo={x} />)})\r\n                    }\r\n                    else{\r\n                    document.querySelector(\".alert1\").style.display=\"block\";\r\n                    } \r\n                    this.setState({search:\"\"})\r\n            }\r\n        }\r\n        else{\r\n        if(document.querySelector(\".textinput\").value!=\"\" ){\r\n        document.querySelector(\".alert1\").style.display=\"none\";\r\n        this.setState({tododisplay:this.state.search})\r\n        this.state.tododisplayarr.push(this.state.search);\r\n        this.setState({todos:this.state.tododisplayarr.map(x=><Todos todo={x} />)})\r\n        }\r\n        else{\r\n        document.querySelector(\".alert1\").style.display=\"block\";\r\n        }\r\n        this.setState({search:\"\"})}\r\n    }\r\n    render(){\r\n  return (\r\n      <div>\r\n      <div  data-test=\"alert\" class=\"alert alert-danger alert1\" role=\"alert\" style={{display:\"none\"}} >\r\n        Add Your To Do  in the input \r\n      </div>\r\n    <div className=\"row todolist\">\r\n        <div className=\"col-xl-10 col-md-9 col-sm-8 col-7\" >\r\n      <MDBInput className=\" textinput ml-5 pl-5\" label=\"Add Todos\"  size=\"lg\" onChange={(event)=>{this.setState({search:event.target.value})}} value={this.state.search} onKeyPress={this.submitForm} required />\r\n      </div>\r\n      <div className=\"col-xl-2 col-md-3 col-sm-4 col-5\">\r\n      <MDBBtn className=\"mt-3 ml-5\" color=\"success\" onClick={this.submitForm}>Submit</MDBBtn>\r\n      </div>\r\n      </div>\r\n      {this.state.todos}\r\n      </div>\r\n  )\r\n}\r\n}\r\nexport default Search;","import React from 'react';\nimport './App.css';\nimport Header from \"./Header\"\nimport Search from \"./Search\"\n\n\n\nfunction App() {\n    return (\n      <div>\n      <Header/>\n      <Search/>\n      </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}